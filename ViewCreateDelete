#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include <psapi.h>
#include <iostream>
#include <string>
#include "TerminateProcess.h"

using namespace std;

void Terminate(DWORD processID)
{
	HANDLE tmpHandle = OpenProcess(PROCESS_ALL_ACCESS, TRUE, processID);
	if (NULL != tmpHandle)
	{
		TerminateProcess(tmpHandle, 0);
	}
	CloseHandle(tmpHandle);
}

void PrintProcessNameAndID(DWORD processID)
{
	TCHAR szProcessName[MAX_PATH] = TEXT("<unknown>");

	HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION |
		PROCESS_VM_READ,
		FALSE, processID);

	if (NULL != hProcess)
	{
		HMODULE hMod;
		DWORD cbNeeded;

		if (EnumProcessModules(hProcess, &hMod, sizeof(hMod),
			&cbNeeded))
		{
			GetModuleBaseName(hProcess, hMod, szProcessName,
				sizeof(szProcessName) / sizeof(TCHAR));
		}
	}

	_tprintf(TEXT("%s  (PID: %u)\n"), szProcessName, processID);

	CloseHandle(hProcess);
}

int main(int argc, TCHAR* argv[])
{
	cout << " 1: view all process\n 2: To start a new process\n 3: To terminate a process from listed\n";

	while (1)
	{
		int getOption;
		cout << "\nChoose your option : ";
		cin >> getOption;

		switch (getOption)
		{
		case 1:
		{
			DWORD aProcesses[1024], cbNeeded, cProcesses;
			unsigned int i;
			if (!EnumProcesses(aProcesses, sizeof(aProcesses), &cbNeeded))
			{
				return 1;
			}
			cProcesses = cbNeeded / sizeof(DWORD);
			for (i = 0; i < cProcesses; i++)
			{
				if (aProcesses[i] != 0)
				{
					PrintProcessNameAndID(aProcesses[i]);
				}
			}

			break;
		}
		case 2:
		{
			/*std:string s;
			cin >> s;
			std::wstring ws;
			ws.assign(s.begin(), s.end());
			LPWSTR pwst = &ws[0];
			LPCWSTR pcwstr = ws.c_str();*/

			STARTUPINFO si = { 0 };
			PROCESS_INFORMATION pi = { 0 };



			BOOL creationBool = CreateProcess(TEXT("C:\\Windows\\notepad.exe"), NULL, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);

			if (creationBool)
			{
				cout << "Creation succesfull\n";
				cout << "Process ID : \t"<<pi.dwProcessId<<endl;
			}

			else
			{
				cout << "Creation was not done\n";
			}

			WaitForSingleObject(pi.hProcess, INFINITE);

			cin.get();
			CloseHandle(pi.hThread);
			CloseHandle(pi.hProcess);
			/*for (i = 0; i < cProcesses; i++)
			{
				if (aProcesses[i] != 0)
				{
					PrintProcessNameAndID(aProcesses[i]);
				}
			}*/
			
			break;
		}
		case 3:
		{
			cout << "Enter the process ID to be deleted : ";
			DWORD processID;
			cin >> processID;
			Terminate(processID);
			break;
		}

		}


	}

	return 0;
}
